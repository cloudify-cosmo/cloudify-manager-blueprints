tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml
  - http://www.getcloudify.org/spec/tosca-vcloud-plugin/1.3.1/plugin.yaml
  - types/manager-types.yaml
  - inputs/manager-inputs.yaml

inputs:

  management_network_name:
    type: string
    description: >
      Name common network that can be used for nodes

  edge_gateway:
    type: string
    default: gateway
    description: >
      For 'ondemand' service type, the value of edge_gateway
      is always 'gateway'

  server_name:
    type: string
    default: centosmanager
    description: >
      Human readible name for server

  ssh_port:
    type: string
    default: 22
    description: >
      SSH port that can be used for installed node

  network_use_existing:
    type: boolean
    default: false
    description: >
      Use existed network

  ssl_verify:
    type: boolean
    default: true
    description: >
        ssl check for connections to private services
        (disable self-signed certificates)

  user_public_key:
    type: string
    description: >
      Public part of your key

  management_port_ip_allocation_mode:
    type: string
    default: dhcp
    description: >
      IP allocation type for cases when you don't set a public ip
      for a node and instead want to auto-allocate it.

  manager_server_cpus:
    type: string
    default: 2
    description: >
      Count cpu on node

  manager_server_memory:
    type: string
    default: 4096
    description: >
      Manager host memory allocation

  #############################
  # vcloud Inputs
  #############################

  vcloud_username:
    type: string
    description: >
      User login for vcloud air

  vcloud_password:
    type: string
    default: ''
    description: >
      User password for vcloud air - for login by name + password

  vcloud_token:
    type: string
    default: ''
    description: >
      User token for vcloud air - for login by name + token

  vcloud_url:
      type: string
      default: 'vca.vmware.com'
      description: >
        Vcloud url

  vcloud_service:
    type: string
    default: ''
    description: >
      Vcloud service

  vcloud_service_type:
    type: string
    default: 'ondemand'
    description: >
      Type of service: subscription, ondemand, vcd, private

  vcloud_api_version:
    type: string
    default: '5.7'
    description: >
      Version of api. For 'ondemand' service must be 5.6,
      for 'subscription' must be 5.7

  vcloud_vdc:
    type: string
    description: >
      Virtual data center name

  vcloud_org:
    type: string
    description: >
      Organization name

  vcloud_org_url:
    type: string
    default: ''
    description: >
      Only required if using token based login on a private vcloud
      director. This can be obtained by following the vcloud API
      example docs. If you are unsure of how to obtain this, you will
      need to use password based login.

  vcloud_instance:
    type: string
    default: ''
    description: >
      Only required for ondemand service type, instance uuid

  catalog:
      type: string
      default: Public Catalog
      description: >
        Name of catalog, can be 'Public Catalog'

  template:
    type: string
    default: CentOS-7-x86_64-1406
    description: >
      Name of template from catalog,
      can be 'CentOS-7-x86_64-1406'

  #############################
  # Provider specific Inputs
  #############################
  public_ip:
    type: string
    default:
    description: >
      Public ip, can be empty for auto allocation.

  private_ip:
    type: string
    default: ''
    description: >
      Port public ip

  ssh_user:
    type: string
    default: root
    description: >
      SSH user used to connect to the manager

  ssh_key_filename:
    type: string
    description: >
      Manager SSH port

  agent_private_key_path:
    type: string
    description: >
      SSH key path used to connect to the application hosts

  agents_user:
    default: ubuntu
    type: string
    description: >
      This is the user with which the Manager
      will try to connect to the application hosts

  resources_prefix:
    default: ''
    type: string
    description: >
       Prefix for all nodes

  #############################
  # Upload Resources Inputs
  #############################
  dsl_resources:
    description: >
      Holds a set of dsl required resources
    default:
      - {'source_path': 'http://www.getcloudify.org/spec/tosca-vcloud-plugin/1.3.1/plugin.yaml', 'destination_path': '/spec/tosca-vcloud-plugin/1.3.1/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml', 'destination_path': '/spec/fabric-plugin/1.4.2/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml', 'destination_path': '/spec/diamond-plugin/1.3.5/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml', 'destination_path': '/spec/cloudify/4.0.1/types.yaml'}

  #############################
  # Dev Inputs
  #############################

  # Some plugins installed from sources require compilation - installs a
  # compiler and the python headers to allow that.
  install_python_compilers:
    type: boolean
    default: false

  #############################
  # Telecom Edition
  #############################
  telecom_edition:
    description: >
      Set this to true if you want Telecom Edition
    type: boolean
    default: false

######################################################################
# This is a vcloud blueprint specific node_type to allow us to define
# The public_ip of the machine is an accessible property of the host.
# By default, the `ip` property is the private ip.
######################################################################
node_types:

  vcloud_configuration:
     derived_from: cloudify.nodes.Root
     properties:
       vcloud_config: {}

  cloudify.nodes.ManagerHost:
    derived_from: cloudify.vcloud.nodes.Server
    properties:
      public_ip:
        type: string
        default: { get_input: public_ip }


######################################################################
# These nodes comprise the manager's infrastructure and components
######################################################################
node_templates:
  vcloud_configuration:
    type: vcloud_configuration
    properties:
      vcloud_config:
        username: { get_input: vcloud_username }
        password: { get_input: vcloud_password }
        token: { get_input: vcloud_token }
        url: { get_input: vcloud_url }
        instance: { get_input: vcloud_instance }
        vdc: { get_input: vcloud_vdc }
        org: { get_input: vcloud_org }
        service_type: { get_input: vcloud_service_type }
        service: { get_input: vcloud_service }
        api_version: { get_input: vcloud_api_version }
        org_url: { get_input: vcloud_org_url }
        edge_gateway: { get_input: edge_gateway }
        ssl_verify: { get_input: ssl_verify }

  management_network_nat:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      use_external_resource: { get_input: network_use_existing }
      nat:
        edge_gateway: { get_input: edge_gateway }
        public_ip: { get_input: public_ip }
      rules:
        - type: SNAT
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

  management_network:
    type: cloudify.vcloud.nodes.Network
    properties:
      use_external_resource: { get_input: network_use_existing }
      resource_id: { get_input: management_network_name }
      network:
        name: { get_input: management_network_name }
        edge_gateway: { get_input: edge_gateway }
        static_range: 10.67.10.129-10.67.10.254
        netmask: 255.255.255.0
        gateway_ip: 10.67.10.1
        dns:
          - 10.67.10.1
          - 8.8.8.8
        dhcp:
          dhcp_range: 10.67.10.2-10.67.10.128
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    relationships:
      - target: management_network_nat
        type: cloudify.vcloud.net_connected_to_public_nat

  ssh_keypair:
    type: cloudify.vcloud.nodes.KeyPair
    properties:
      public_key:
        user: { get_input: ssh_user }
        key: { get_input: user_public_key }
      private_key:
        path: { get_input: ssh_key_filename }

  manager_security_group:
    type: cloudify.vcloud.nodes.SecurityGroup
    properties:
      security_group:
        name: manager_security_group
        edge_gateway: { get_input: edge_gateway }
      rules:
        - source: external
          destination: internal
          destination_port: { get_input: ssh_port }
          action: allow
          description: >
            ssh between external net and manager node
          protocol: TCP
        - source: external
          destination: internal
          destination_port: 80
          action: allow
          description: >
            http to manager node
          protocol: TCP
        - source: external
          destination: internal
          destination_port: 443
          action: allow
          description: >
            https to manager node
          protocol: TCP
        - source: internal
          destination: any
          action: allow
          description: >
            backward network connection for host updates
          protocol: any
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

  manager_public_ip:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      nat:
        edge_gateway: { get_input: edge_gateway }
        public_ip: { get_input: public_ip }
      rules:
        - type: DNAT
          protocol: tcp
          original_port:  { get_input: ssh_port }
          translated_port: 22
        - type: DNAT
          protocol: tcp
          original_port: 80
          translated_port: 80
        - type: DNAT
          protocol: tcp
          original_port: 443
          translated_port: 443
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

  management_port:
    type: cloudify.vcloud.nodes.Port
    properties:
      port:
        network: { get_input: management_network_name }
        ip_allocation_mode: { get_input: management_port_ip_allocation_mode }
        ip_address: { get_input: private_ip }
        primary_interface: true
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    relationships:
      - target: management_network
        type: cloudify.vcloud.port_connected_to_network

  manager_host:
    type: cloudify.nodes.ManagerHost
    properties:
      server:
        name: { get_input: server_name }
        catalog: { get_input: catalog }
        template: { get_input: template }
        hardware:
          cpu: { get_input: manager_server_cpus }
          memory: { get_input: manager_server_memory }
        guest_customization:
          computer_name: { get_input: server_name }
      install_agent: false
      management_network: { get_input: management_network_name }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
      install_agent: false
      ip: { get_attribute: [management_port, ip] }
      public_ip: { get_attribute: [manager_public_ip, public_ip] }
    relationships:
      - target: manager_public_ip
        type: cloudify.vcloud.server_connected_to_public_nat
      - target: ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: management_port
        type: cloudify.vcloud.server_connected_to_port
      - target: manager_security_group
        type: cloudify.vcloud.server_connected_to_security_group

  # #####################################################################
  # The manager_configuration node is meant to be read by Cloudify to
  # provide runtime configuration and information for the CLI and the
  # Manager.
  # #####################################################################
  manager_resources:
    type: cloudify.nodes.ManagerResources
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  manager_configuration:
    type: cloudify.nodes.MyCloudifyManager
    properties:
      ssh_user: { get_input: ssh_user }
      ssh_port: { get_input: ssh_port }
      ssh_key_filename: { get_input: ssh_key_filename }
      agent_local_key_path: { get_input: agent_private_key_path }
      cloudify:
        resources_prefix: { get_input: resources_prefix }

        cloudify_agent:
          min_workers: 0
          max_workers: 5
          remote_execution_port: 22
          user: { get_input: agents_user }
          broker_user: { get_input: rabbitmq_username }
          broker_pass: { get_input: rabbitmq_password }
          broker_ssl_enabled: true

        workflows:
          task_retries: { get_input: workflow_task_retries }
          task_retry_interval: { get_input: workflow_task_retry_interval }

        policy_engine:
          start_timeout: 30

        # Declare rules for the default import resolver
        # which enables using the manager in offline mode.
        # The resolver replaces an import's http link with the local path
        # on the manager according to the matching rule's value.
        # If the resolver cannot read the import from the specified local path
        # (e.g. when the manager is not in offline mode),
        # it will fall back to the original http link.
        import_resolver:
          parameters:
            rules: { get_input: import_resolver_rules }

        upload_resources:
          dsl_resources: { get_input: dsl_resources }

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: components/manager/scripts/vcloud/update-vcloud-vm.sh
            hide_output: &hide_output
              - running
            fabric_env: &vcloud_fabric_env
              user: { get_input: ssh_user }
              key_filename: { get_input: ssh_key_filename }
              host_string: { get_attribute: [manager_public_ip, public_ip] }
              port: { get_input: ssh_port }
              disable_known_hosts: True
              always_use_pty: true
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: components/manager/scripts/vcloud/configure.py
            task_name: configure
            task_properties:
              vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
            hide_output: *hide_output
            fabric_env: *vcloud_fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: components/manager/scripts/configure_manager.py
            hide_output: *hide_output
            fabric_env: *vcloud_fabric_env

    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            postconfigure:
              implementation: components/manager/scripts/set_manager_ips.py
              inputs:
                public_ip: { get_attribute: [manager_public_ip, public_ip] }
                rest_host_internal_endpoint_type: { get_property: [rest_service, rest_host_internal_endpoint_type] }
                rest_host_external_endpoint_type: { get_property: [rest_service, rest_host_external_endpoint_type] }
      - type: cloudify.relationships.depends_on
        target: manager_public_ip

  # #####################################################################
  # The Python and Java nodes are used to provide runtime environments
  # on specific hosts. It allows us to define the runtime environment
  # and install it only once per host and then have a node depend on it.
  # Note that Erlang and NodeJS are also installed as runtime envs as
  # part of the RabbitMQ and Stage nodes respectively but as they're not
  # used by multiple nodes, we're not specifying them as independent
  # entities.
  # #####################################################################
  python_runtime:
    type: manager.nodes.PythonRuntime
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  java_runtime:
    type: manager.nodes.JavaRuntime
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  ######################################################################
  # These are the nodes comprising the Cloudify Manager's components
  ######################################################################
  consul:
    type: manager.nodes.Consul
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources

  rabbitmq:
    type: manager.nodes.RabbitMQ
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  syncthing:
    type: manager.nodes.Syncthing
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: consul

  postgresql:
    type: manager.nodes.Postgresql
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources

  logstash:
    type: manager.nodes.Logstash
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: logstash_to_postgresql
        target: postgresql
      - type: logstash_to_rabbitmq
        target: rabbitmq

  influxdb:
    type: manager.nodes.InfluxDB
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  nginx:
    type: manager.nodes.Nginx
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: rest_service
      - type: nginx_to_manager_configuration
        target: manager_configuration

  riemann:
    type: manager.nodes.Riemann
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: riemann_to_manager_configuration
        target: manager_configuration
      - type: riemann_to_rabbitmq
        target: rabbitmq
      - type: riemann_to_nginx
        target: nginx

  rest_service:
    type: manager.nodes.RestService
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: rest_to_manager_configuration
        target: manager_configuration
      - type: restservice_to_postgresql
        target: postgresql
      - type: restservice_to_rabbitmq
        target: rabbitmq

  mgmt_worker:
    type: manager.nodes.ManagementWorker
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: mgmtworker_to_rabbitmq
        target: rabbitmq
      - type: mgmtworker_to_manager_configuration
        target: manager_configuration

  amqp_influx:
    type: manager.nodes.AmqpInfluxBroker
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: amqpinflux_to_rabbitmq
        target: rabbitmq
      - type: amqpinflux_to_influxdb
        target: influxdb

  stage:
    type: manager.nodes.Stage
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: stage_to_restservice
        target: rest_service
      - type: stage_to_influxdb
        target: influxdb

  #################################
  # Sanity
  #################################
  sanity:
    type: manager.nodes.Sanity
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: sanity_to_mgr_config
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: cloudify.relationships.depends_on
        target: postgresql
      - type: cloudify.relationships.depends_on
        target: logstash
      - type: cloudify.relationships.depends_on
        target: influxdb
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: cloudify.relationships.depends_on
        target: riemann
      - type: cloudify.relationships.depends_on
        target: rest_service
      - type: cloudify.relationships.depends_on
        target: mgmt_worker
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: amqp_influx

  ######################################################################
  # Enable this node if you want to have the CLI installed within
  # the manager. This might aid in debugging problems or just
  # controlling the manager from within itself.
  ######################################################################
  # cli:
  #   type: manager.nodes.CLI
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: manager_host
  #     - type: cloudify.relationships.depends_on
  #       target: nginx
  #     - type: cloudify.relationships.depends_on
  #       target: rest_service


plugins:
  cli:
    install: false
    executor: central_deployment_agent

outputs:
  manager_ip:
    value: { get_attribute: [manager_public_ip, public_ip] }
  rest_server_public_certificate:
    value: { get_attribute: [manager_configuration, external_rest_cert_content] }
  private_ip:
    value: { get_attribute: [ manager_host, ip ]}
