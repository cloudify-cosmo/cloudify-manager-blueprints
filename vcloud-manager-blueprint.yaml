tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4.2/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml
  - http://www.getcloudify.org/spec/tosca-vcloud-plugin/1.3.1/plugin.yaml
  - types/manager-types.yaml

inputs:

  management_network_name:
    type: string
    description: >
      Name common network that can be used for nodes

  edge_gateway:
    type: string
    default: gateway
    description: >
      For 'ondemand' service type, the value of edge_gateway
      is always 'gateway'

  server_name:
    type: string
    default: centosmanager
    description: >
      Human readible name for server

  ssh_port:
    type: string
    default: 22
    description: >
      SSH port that can be used for installed node

  network_use_existing:
    type: boolean
    default: false
    description: >
      Use existed network

  ssl_verify:
    type: boolean
    default: true
    description: >
        ssl check for connections to private services
        (disable self-signed certificates)

  user_public_key:
    type: string
    description: >
      Public part of your key

  management_port_ip_allocation_mode:
    type: string
    default: dhcp
    description: >
      IP allocation type for cases when you don't set a public ip
      for a node and instead want to auto-allocate it.

  manager_server_cpus:
    type: string
    default: 2
    description: >
      Count cpu on node

  manager_server_memory:
    type: string
    default: 4096
    description: >
      Manager host memory allocation

  #############################
  # vcloud Inputs
  #############################

  vcloud_username:
    type: string
    description: >
      User login for vcloud air

  vcloud_password:
    type: string
    default: ''
    description: >
      User password for vcloud air - for login by name + password

  vcloud_token:
    type: string
    default: ''
    description: >
      User token for vcloud air - for login by name + token

  vcloud_url:
      type: string
      default: 'vca.vmware.com'
      description: >
        Vcloud url

  vcloud_service:
    type: string
    default: ''
    description: >
      Vcloud service

  vcloud_service_type:
    type: string
    default: 'ondemand'
    description: >
      Type of service: subscription, ondemand, vcd, private

  vcloud_api_version:
    type: string
    default: '5.7'
    description: >
      Version of api. For 'ondemand' service must be 5.6,
      for 'subscription' must be 5.7

  vcloud_vdc:
    type: string
    description: >
      Virtual data center name

  vcloud_org:
    type: string
    description: >
      Organization name

  vcloud_org_url:
    type: string
    default: ''
    description: >
      Only required if using token based login on a private vcloud
      director. This can be obtained by following the vcloud API
      example docs. If you are unsure of how to obtain this, you will
      need to use password based login.

  vcloud_instance:
    type: string
    default: ''
    description: >
      Only required for ondemand service type, instance uuid

  catalog:
      type: string
      default: Public Catalog
      description: >
        Name of catalog, can be 'Public Catalog'

  template:
    type: string
    default: CentOS-7-x86_64-1406
    description: >
      Name of template from catalog,
      can be 'CentOS-7-x86_64-1406'

  #############################
  # Provider specific Inputs
  #############################
  public_ip:
    type: string
    default:
    description: >
      Public ip, can be empty for auto allocation.

  private_ip:
    type: string
    default: ''
    description: >
      Port public ip

  ssh_user:
    type: string
    default: root
    description: >
      SSH user used to connect to the manager

  ssh_key_filename:
    type: string
    description: >
      SSH key path used to connect to the manager

  agent_private_key_path:
    type: string
    description: >
      SSH key path used to connect to the application hosts

  agents_user:
    default: ubuntu
    type: string
    description: >
      This is the user with which the Manager
      will try to connect to the application hosts

  resources_prefix:
    default: ''
    type: string
    description: >
       Prefix for all nodes

  #############################
  # Security Settings
  #############################
  security_enabled:
    default: false

  ssl_enabled:
    default: false

  admin_username:
    default: admin

  admin_password:
    default: admin

  insecure_endpoints_disabled:
    description: Disables insecure REST endpoints
    type: boolean
    default: false

  #############################
  # Bootstrap Validations
  #############################
  ignore_bootstrap_validations:
    description: >
      While validations will be performed, they will be ignored.
    type: string
    default: false

  minimum_required_total_physical_memory_in_mb:
    description: Minimum required physical memory on Manager host in MB.
    type: integer
    default: 3792

  minimum_required_available_disk_space_in_gb:
    description: Minimum required disk space on Manager host in GB.
    type: integer
    default: 5

  allowed_heap_size_gap_in_mb:
    description: Gap between heap size and total Manager host's memory in MB.
    type: integer
    default: 1000

  #############################
  # Manager Resources Package
  #############################
  manager_resources_package:
    description: A URL to a tar files containing all of the manager's resources
    type: string
    default: http://repository.cloudifysource.org/org/cloudify3/3.4.2/sp-RELEASE/cloudify-manager-resources_3.4.2-sp-b420.tar.gz

  manager_resources_package_checksum_file:
    description: >
      A URL to the Manager Resources Package md5 checksum file.
      This defaults to an empty string, meaning that
    type: string
    default: ''

  skip_checksum_validation:
    description: Whether to skip md5 checksum validation or not
    type: boolean
    default: true

  #############################
  # Agent Packages
  #############################

  # Nginx, being the fileserver, also serves agent packages.
  # The key names of the agents must be in the format: distro_release_agent
  # as the key is what's used to name the file, which later allows our
  # agent installer to identify it for your distro and release automatically.
  agent_package_urls:
    default:
      ubuntu_trusty_agent: Ubuntu-trusty-agent_3.4.2-sp-b420.tar.gz
      ubuntu_precise_agent: Ubuntu-precise-agent_3.4.2-sp-b420.tar.gz
      centos_7x_agent: centos-Core-agent_3.4.2-sp-b420.tar.gz
      centos_6x_agent: centos-Final-agent_3.4.2-sp-b420.tar.gz
      redhat_7x_agent: redhat-Maipo-agent_3.4.2-sp-b420.tar.gz
      redhat_6x_agent: redhat-Santiago-agent_3.4.2-sp-b420.tar.gz
      cloudify_windows_agent: cloudify-windows-agent_3.4.2-sp-b420.exe

  #############################
  # Cloudify Modules
  #############################
  rest_service_rpm_source_url:
    type: string
    default: cloudify-rest-service-3.4.2-sp_b420.x86_64.rpm

  management_worker_rpm_source_url:
    type: string
    default: cloudify-management-worker-3.4.2-sp_b420.x86_64.rpm

  amqpinflux_rpm_source_url:
    type: string
    default: cloudify-amqp-influx-3.4.2-sp_b420.x86_64.rpm

  cloudify_resources_url:
    type: string
    default: cloudify-manager-3.4.2.tar.gz

  webui_source_url:
    type: string
    default: cloudify-ui-3.4.2-sp-b420.tgz

  # This is a Cloudify specific redistribution of Grafana.
  grafana_source_url:
    type: string
    default: grafana-1.9.0.tgz

  #############################
  # External Components
  #############################
  pip_source_rpm_url:
    type: string
    default: python-pip-7.1.0-1.el7.noarch.rpm

  java_source_url:
    type: string
    default: jre1.8.0_45-1.8.0_45-fcs.x86_64.rpm

  erlang_source_url:
    type: string
    default: erlang-17.4-1.el6.x86_64.rpm

  rabbitmq_source_url:
    type: string
    default: rabbitmq-server-3.5.3-1.noarch.rpm

  elasticsearch_source_url:
    type: string
    default: elasticsearch-1.6.0.noarch.rpm

  elasticsearch_curator_rpm_source_url:
    type: string
    default: elasticsearch-curator-3.2.3-1.x86_64.rpm

  logstash_source_url:
    type: string
    default: logstash-1.5.0-1.noarch.rpm

  nginx_source_url:
    type: string
    default: nginx-1.8.0-1.el7.ngx.x86_64.rpm

  influxdb_source_url:
    type: string
    default: influxdb-0.8.8-1.x86_64.rpm

  langohr_source_url:
    type: string
    default: langohr.jar

  daemonize_source_url:
    type: string
    default: daemonize-1.7.3-7.el7.x86_64.rpm

  riemann_source_url:
    type: string
    default: riemann-0.2.6-1.noarch.rpm

  nodejs_source_url:
    type: string
    default: node-v0.10.35-linux-x64.tar.gz

  sanity_app_source_url:
      type: string
      default: cloudify-hello-world-example-3.4.2.tar.gz

  #############################
  # RabbitMQ Inputs
  #############################

  rabbitmq_endpoint_ip:
    description: >
      Location of the rabbit server. If blank, the manager IP will be used.
      Note that if this is set, the external rabbit service must already exist with the appropriate
      credentials and configuration.
      If this is set, rabbit will not be installed on the manager. This may have security implications
      if you are using SSL for rabbit as some normally internal (to the manager) traffic is not currently
      encrypted.
    type: string
    default: ''

  rabbitmq_events_queue_message_ttl:
    description: >
      Sets the number of milliseconds to wait before a message expires
      in the events queue.
      Not used if an external endpoint is used.
    type: integer
    default: 60000

  rabbitmq_logs_queue_message_ttl:
    description: >
      Sets the number of milliseconds to wait before a message expires
      in the logs queue.
      Not used if an external endpoint is used.
    type: integer
    default: 60000

  rabbitmq_metrics_queue_message_ttl:
    description: >
      Sets the number of milliseconds to wait before a message expires
      in the metrics queues.
      Not used if an external endpoint is used.
    type: integer
    default: 60000

  rabbitmq_username:
    description: >
      Sets the username to use for clients such as celery to connect to the rabbitmq broker.
      It is recommended that you set both the username and password to something reasonably secure.
    type: string
    default: cloudify

  rabbitmq_password:
    description: >
      Sets the password to use for clients such as celery to connect to the rabbitmq broker.
      It is recommended that you set both the username and password to something reasonably secure.
    type: string
    default: c10udify

  rabbitmq_ssl_enabled:
    description: >
      Whether SSL should be enabled for RabbitMQ. If this is set to true then the public and private
      certs must be supplied (rabbitmq_cert_private, rabbitmq_cert_public inputs).
    type: boolean
    default: false

  rabbitmq_cert_private:
    description: >
      The private certificate for RabbitMQ to use for SSL. This must be PEM formatted.
      It is expected to begin with a line containing 'PRIVATE KEY' in the middle.
      Not used if an external endpoint is used.
    type: string
    default: ''

  rabbitmq_cert_public:
    description: >
      The public certificate for RabbitMQ to use for SSL. This does not need to be signed by any CA,
      as it will be deployed and explicitly used for all other components.
      It may be self-signed. It must be PEM formatted.
      It is expected to begin with a line of dashes with 'BEGIN CERTIFICATE' in the middle.
      If an external endpoint is used, this must be the public certificate associated with the private
      certificate that has already been configured for use by that rabbit endpoint.
    type: string
    default: ''

  # note that for each of the queue length limit properties, new messages
  # will be queued in RabbitMQ and old messages will be deleted once the
  # limit is reached!
  # https://www.rabbitmq.com/maxlength.html
  rabbitmq_events_queue_length_limit:
    description: >
      Sets the number of messages the events queue can hold.
      Note this is NOT the message byte length!
      Not used if an external endpoint is used.
    type: integer
    default: 1000000

  rabbitmq_logs_queue_length_limit:
    description: >
      Sets the number of messages the logs queue can hold.
      Note this is NOT the message byte length!
      Not used if an external endpoint is used.
    type: integer
    default: 1000000

  rabbitmq_metrics_queue_length_limit:
    description: >
      Sets the number of messages the metrics queues can hold.
      This applies to both the queue that amqp-influx pulls from and
      the ones Riemann pulls from.
      Note this is NOT the message byte length!
      Not used if an external endpoint is used.
    type: integer
    default: 1000000

  rabbitmq_fd_limit:
    description: >
      Sets the File Descriptor limit for the rabbitmq user.
      Not used if an external endpoint is used.
    type: integer
    default: 102400

  #############################
  # Management Workers Inputs
  #############################

  management_worker_log_level:
    description: >
      Sets the logging level to use for the management workers. This affects the logging performed
      by the manager during the execution of management tasks, such as deployment creation
      and deployment deletion.
      NOTE: specifying "debug" will result in considerable amount of logging activity. Consider
      using "info" (or a more restrictive level) for production environments.
    type: string
    default: debug

  #############################
  # Elasticsearch Inputs
  #############################
  # https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html
  elasticsearch_heap_size:
    type: string
    default: "2g"

  elasticsearch_java_opts:
    description: >
      Provide any JAVA_OPTS to Elasticsearch.
    type: string
    default: ''

  # The index for events/logs will be named `logstash-YYYY.mm.dd` and
  # A new index corresponding with today's date will be added each day.
  # Elasticsearch Curator is used to rotate the indices on a daily basis
  # via a cronjob.
  # https://www.elastic.co/blog/curator-tending-your-time-series-indices
  elasticsearch_index_rotation_interval:
    description: >
      Determines the number of days to keep.
    type: integer
    default: 30

  elasticsearch_endpoint_ip:
    description: >
      An IP Endpoint of your Elasticsearch Cluster.
    type: string
    default: ''

  elasticsearch_endpoint_port:
    description: >
      The Port of your Elasticsearch Cluster.
    type: integer
    default: 9200

  elasticsearch_clustering_enabled:
    description: >
      Whether to enable automatic clustering of elasticsearch nodes via multicast discovery.
      This can be either 'true' or 'false'
    type: string
    default: 'false'

  elasticsearch_clustering_discovery_port:
    description: >
      The port used to discover other elasticsearch nodes on the same network.
      Note that the default in elasticsearch's configuration is 54328. Here we default to
      another port to prevent accidental discovery of already installed node within the
      same network.
    type: integer
    default: 54329

  #############################
  # REST Configuration
  #############################
  rest_service_gunicorn_worker_count:
    description: |
      The number of worker processes for handling requests.
      If the default value (0) is set, then min((2 * cpu_count + 1 processes), 12) will be used.
    type: integer
    default: 0

  rest_service_gunicorn_max_requests:
    description: |
      The maximum number of requests a worker will process before restarting.
      If this is set to zero then the automatic worker restarts are disabled.
    type: integer
    default: 1000

  rest_service_log_level:
    description: |
      Logging level for the REST service. Defaults to 'INFO', as 'DEBUG' may end up
      logging sensitive information.
    type: string
    default: INFO

  rest_service_log_file_size:
    description: |
      The size, in MB, that the REST service log file may grow to before it's rotated.
    type: integer
    default: 100

  rest_service_log_files_backup_count:
    description: |
      Number of historical log files to keep when rotating the REST service logs.
    type: integer
    default: 20

  #############################
  # InfluxDB Inputs
  #############################
  influxdb_endpoint_ip:
    description: >
      An IP Endpoint of your InfluxDB Cluster.
    type: string
    default: ''

  #############################
  # Management Worker Inputs
  #############################
  management_worker_max_workers:
    description: >
      Max number of celery workers.
    type: integer
    default: 100
  management_worker_min_workers:
    description: >
      Min number of celery workers.
    type: integer
    default: 2

  #############################
  # Upload Resources Inputs
  #############################
  dsl_resources:
    description: >
      Holds a set of dsl required resources
    default:
      - {'source_path': 'http://www.getcloudify.org/spec/tosca-vcloud-plugin/1.3.1/plugin.yaml', 'destination_path': '/spec/tosca-vcloud-plugin/1.3.1/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml', 'destination_path': '/spec/fabric-plugin/1.4.1/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml', 'destination_path': '/spec/diamond-plugin/1.3.5/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/cloudify/3.4.2/types.yaml', 'destination_path': '/spec/cloudify/3.4.2/types.yaml'}

  ###############################
  # Import Resolver Configuration
  ###############################
  import_resolver_rules:
    description: >
      An imported URL is prefix-matched against the key in each entry. If a match is found,
      then the URL prefix is replaced with the value of the corresponding entry.
      That allows serving YAML files from within the manager, even when the imported URL
      points to the external network.
    default:
      - {'http://www.getcloudify.org/spec': 'file:///opt/manager/resources/spec'}

  #############################
  # Dev Inputs
  #############################

  # Some plugins installed from sources require compilation - installs a
  # compiler and the python headers to allow that.
  install_python_compilers:
    type: boolean
    default: false

  # For development purposes, you can use these, which will override the modules
  # supplied within the rpm.
  # These should be pip installable tar.gz files.

  cli_source_url:
    type: string
    default: ''

  rest_service_source_url:
    type: string
    default: ''

  dsl_parser_source_url:
    type: string
    default: ''

  rest_client_source_url:
    type: string
    default: ''

  plugins_common_source_url:
    type: string
    default: ''

  script_plugin_source_url:
    type: string
    default: ''

  securest_source_url:
    type: string
    default: ''

  amqpinflux_source_url:
    type: string
    default: ''

  agent_source_url:
    type: string
    default: ''

  #############################
  # Telecom Edition
  #############################
  telecom_edition:
    description: >
      Set this to true if you want Telecom Edition
    type: boolean
    default: false

######################################################################
# This is a vcloud blueprint specific node_type to allow us to define
# The public_ip of the machine is an accessible property of the host.
# By default, the `ip` property is the private ip.
######################################################################
node_types:

  vcloud_configuration:
     derived_from: cloudify.nodes.Root
     properties:
       vcloud_config: {}

  cloudify.nodes.ManagerHost:
    derived_from: cloudify.vcloud.nodes.Server
    properties:
      public_ip:
        type: string
        default: { get_input: public_ip }


######################################################################
# These nodes comprise the manager's infrastructure and components
######################################################################
node_templates:
  vcloud_configuration:
    type: vcloud_configuration
    properties:
      vcloud_config:
        username: { get_input: vcloud_username }
        password: { get_input: vcloud_password }
        token: { get_input: vcloud_token }
        url: { get_input: vcloud_url }
        instance: { get_input: vcloud_instance }
        vdc: { get_input: vcloud_vdc }
        org: { get_input: vcloud_org }
        service_type: { get_input: vcloud_service_type }
        service: { get_input: vcloud_service }
        api_version: { get_input: vcloud_api_version }
        org_url: { get_input: vcloud_org_url }
        edge_gateway: { get_input: edge_gateway }
        ssl_verify: { get_input: ssl_verify }

  management_network_nat:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      use_external_resource: { get_input: network_use_existing }
      nat:
        edge_gateway: { get_input: edge_gateway }
        public_ip: { get_input: public_ip }
      rules:
        - type: SNAT
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

  management_network:
    type: cloudify.vcloud.nodes.Network
    properties:
      use_external_resource: { get_input: network_use_existing }
      resource_id: { get_input: management_network_name }
      network:
        name: { get_input: management_network_name }
        edge_gateway: { get_input: edge_gateway }
        static_range: 10.67.10.129-10.67.10.254
        netmask: 255.255.255.0
        gateway_ip: 10.67.10.1
        dns:
          - 10.67.10.1
          - 8.8.8.8
        dhcp:
          dhcp_range: 10.67.10.2-10.67.10.128
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    relationships:
      - target: management_network_nat
        type: cloudify.vcloud.net_connected_to_public_nat

  ssh_keypair:
    type: cloudify.vcloud.nodes.KeyPair
    properties:
      public_key:
        user: { get_input: ssh_user }
        key: { get_input: user_public_key }
      private_key:
        path: { get_input: ssh_key_filename }

  manager_security_group:
    type: cloudify.vcloud.nodes.SecurityGroup
    properties:
      security_group:
        name: manager_security_group
        edge_gateway: { get_input: edge_gateway }
      rules:
        - source: external
          destination: internal
          destination_port: { get_input: ssh_port }
          action: allow
          description: >
            ssh between external net and manager node
          protocol: TCP
        - source: external
          destination: internal
          destination_port: 80
          action: allow
          description: >
            http to manager node
          protocol: TCP
        - source: external
          destination: internal
          destination_port: 443
          action: allow
          description: >
            https to manager node
          protocol: TCP
        - source: internal
          destination: any
          action: allow
          description: >
            backward network connection for host updates
          protocol: any
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

  manager_public_ip:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      nat:
        edge_gateway: { get_input: edge_gateway }
        public_ip: { get_input: public_ip }
      rules:
        - type: DNAT
          protocol: tcp
          original_port:  { get_input: ssh_port }
          translated_port: 22
        - type: DNAT
          protocol: tcp
          original_port: 80
          translated_port: 80
        - type: DNAT
          protocol: tcp
          original_port: 443
          translated_port: 443
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

  management_port:
    type: cloudify.vcloud.nodes.Port
    properties:
      port:
        network: { get_input: management_network_name }
        ip_allocation_mode: { get_input: management_port_ip_allocation_mode }
        ip_address: { get_input: private_ip }
        primary_interface: true
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    relationships:
      - target: management_network
        type: cloudify.vcloud.port_connected_to_network

  manager_host:
    type: cloudify.nodes.ManagerHost
    properties:
      server:
        name: { get_input: server_name }
        catalog: { get_input: catalog }
        template: { get_input: template }
        hardware:
          cpu: { get_input: manager_server_cpus }
          memory: { get_input: manager_server_memory }
        guest_customization:
          computer_name: { get_input: server_name }
      install_agent: false
      management_network: { get_input: management_network_name }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
      install_agent: false
      ip: { get_attribute: [management_port, ip] }
      public_ip: { get_attribute: [manager_public_ip, public_ip] }
    relationships:
      - target: manager_public_ip
        type: cloudify.vcloud.server_connected_to_public_nat
      - target: ssh_keypair
        type: cloudify.vcloud.server_connected_to_keypair
      - target: management_port
        type: cloudify.vcloud.server_connected_to_port
      - target: manager_security_group
        type: cloudify.vcloud.server_connected_to_security_group

  # #####################################################################
  # The manager_configuration node is meant to be read by Cloudify to
  # provide runtime configuration and information for the CLI and the
  # Manager.
  # #####################################################################
  manager_resources:
    type: cloudify.nodes.ManagerResources
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host

  manager_configuration:
    type: cloudify.nodes.MyCloudifyManager
    properties:
      ssh_user: { get_input: ssh_user }
      ssh_key_filename: { get_input: ssh_key_filename }
      agent_local_key_path: { get_input: agent_private_key_path }
      cloudify:
        resources_prefix: { get_input: resources_prefix }

        cloudify_agent:
          min_workers: 0
          max_workers: 5
          remote_execution_port: 22
          user: { get_input: agents_user }
          broker_ip: { get_input: rabbitmq_endpoint_ip }
          broker_user: { get_input: rabbitmq_username }
          broker_pass: { get_input: rabbitmq_password }
          broker_ssl_enabled: { get_input: rabbitmq_ssl_enabled }
          broker_ssl_cert: { get_input: rabbitmq_cert_public }

        workflows:
          task_retries: -1  # this means forever
          task_retry_interval: 30

        policy_engine:
          start_timeout: 30

        # Declare rules for the default import resolver
        # which enables using the manager in offline mode.
        # The resolver replaces an import's http link with the local path
        # on the manager according to the matching rule's value.
        # If the resolver cannot read the import from the specified local path
        # (e.g. when the manager is not in offline mode),
        # it will fall back to the original http link.
        import_resolver:
          parameters:
            rules: { get_input: import_resolver_rules }

        upload_resources:
          dsl_resources: { get_input: dsl_resources }

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: components/manager/scripts/vcloud/update-vcloud-vm.sh
            hide_output: &hide_output
              - running
            fabric_env: &vcloud_fabric_env
              user: { get_input: ssh_user }
              key_filename: { get_input: ssh_key_filename }
              host_string: { get_attribute: [manager_public_ip, public_ip] }
              port: { get_input: ssh_port }
              disable_known_hosts: True
              always_use_pty: true
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: components/manager/scripts/vcloud/configure.py
            task_name: configure
            task_properties:
              vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
            hide_output: *hide_output
            fabric_env: *vcloud_fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: components/manager/scripts/configure_manager.sh
            hide_output: *hide_output
            fabric_env: *vcloud_fabric_env

    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            postconfigure:
              implementation: components/manager/scripts/set_manager_public_ip.py
              inputs:
                public_ip: { get_attribute: [manager_public_ip, public_ip] }
      - type: cloudify.relationships.depends_on
        target: manager_resources

  # #####################################################################
  # The Python and Java nodes are used to provide runtime environments
  # on specific hosts. It allows us to define the runtime environment
  # and install it only once per host and then have a node depend on it.
  # Note that Erlang and NodeJS are also installed as runtime envs as
  # part of the RabbitMQ and WebUI nodes respectively but as they're not
  # used by multiple nodes, we're not specifying them as independent
  # entities.
  # #####################################################################
  python_runtime:
    type: manager.nodes.PythonRuntime
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  java_runtime:
    type: manager.nodes.JavaRuntime
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  ######################################################################
  # These are the nodes comprising the Cloudify Manager's components
  ######################################################################
  rabbitmq:
    type: manager.nodes.RabbitMQ
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  elasticsearch:
    type: manager.nodes.Elasticsearch
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  logstash:
    type: manager.nodes.Logstash
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: logstash_to_elasticsearch
        target: elasticsearch
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  influxdb:
    type: manager.nodes.InfluxDB
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  nginx:
    type: manager.nodes.Nginx
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: nginx_to_manager_configuration
        target: manager_configuration
      - type: nginx_to_restservice
        target: rest_service

  riemann:
    type: manager.nodes.Riemann
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: riemann_to_rabbitmq
        target: rabbitmq
      - type: riemann_to_nginx
        target: nginx
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  rest_service:
    type: manager.nodes.RestService
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: rest_to_mgr_config
        target: manager_configuration
      - type: restservice_to_elasticsearch
        target: elasticsearch
      - type: restservice_to_rabbitmq
        target: rabbitmq

  mgmt_worker:
    type: manager.nodes.ManagementWorker
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: mgmtworker_to_rabbitmq
        target: rabbitmq
      - type: mgmtworker_to_nginx
        target: nginx
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  amqp_influx:
    type: manager.nodes.AmqpInfluxBroker
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: amqpinflux_to_rabbitmq
        target: rabbitmq
      - type: amqpinflux_to_influxdb
        target: influxdb
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  webui:
    type: manager.nodes.WebUI
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: webui_to_restservice
        target: rest_service
      - type: webui_to_influxdb
        target: influxdb
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  #################################
  # Sanity
  #################################
  sanity:
    type: manager.nodes.Sanity
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: sanity_to_mgr_config
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: cloudify.relationships.depends_on
        target: elasticsearch
      - type: cloudify.relationships.depends_on
        target: logstash
      - type: cloudify.relationships.depends_on
        target: influxdb
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: cloudify.relationships.depends_on
        target: riemann
      - type: cloudify.relationships.depends_on
        target: rest_service
      - type: cloudify.relationships.depends_on
        target: mgmt_worker
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: amqp_influx

  ######################################################################
  # Enable this node if you want to have the CLI installed within
  # the manager. This might aid in debugging problems or just
  # controlling the manager from within itself.
  ######################################################################
  # cli:
  #   type: manager.nodes.CLI
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: manager_host
  #     - type: cloudify.relationships.depends_on
  #       target: nginx
  #     - type: cloudify.relationships.depends_on
  #       target: restservice


plugins:
  cli:
    install: false
    executor: central_deployment_agent

outputs:
  manager_ip:
    value: { get_attribute: [manager_public_ip, public_ip] }
  private_ip:
    value: { get_attribute: [ manager_host, ip ]}
