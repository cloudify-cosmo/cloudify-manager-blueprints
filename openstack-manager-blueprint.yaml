tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - types/manager-types.yaml
  - inputs/manager-inputs.yaml

inputs:

  #############################
  # Provider specific Inputs
  #############################

  keystone_username:
    default: ''
    type: string

  keystone_password:
    default: ''
    type: string

  keystone_tenant_name:
    default: ''
    type: string

  keystone_url:
    default: ''
    type: string

  region:
    default: ''
    type: string

  nova_url:
    default: ''
    type: string

  neutron_url:
    default: ''
    type: string

  manager_public_key_name:
    type: string

  agent_public_key_name:
    type: string

  image_id:
    type: string

  flavor_id:
    type: string

  external_network_name:
    type: string

  use_existing_manager_keypair:
    type: boolean
    default: false

  use_existing_agent_keypair:
    type: boolean
    default: false

  manager_server_name:
    default: cloudify-manager-server
    type: string

  ssh_user:
    default: centos
    type: string

  ssh_port:
    type: string
    default: 22
    description: >
      Manager SSH port

  ssh_key_filename:
    default: ~/.ssh/cloudify-manager-kp.pem
    type: string

  agent_private_key_path:
    default: ~/.ssh/cloudify-agent-kp.pem
    type: string

  agents_user:
    default: centos
    type: string

  resources_prefix:
    default: ''
    type: string

  management_network_name:
    default: cloudify-management-network
    type: string

  management_subnet_name:
    default: cloudify-management-network-subnet
    type: string

  management_subnet_dns_nameservers:
    default: []

  management_router:
    default: cloudify-management-router
    type: string

  manager_security_group_name:
    default: cloudify-sg-manager
    type: string

  agents_security_group_name:
    default: cloudify-sg-agents
    type: string

  manager_port_name:
    default: cloudify-manager-port
    type: string

  skip_openstack_cert_verification:
    default: false
    type: boolean
    description: Whether (true) or not (false) to allow a non-trusted SSL certificate presented by OpenStack.

  #############################
  # Upload Resources Inputs
  #############################
  dsl_resources:
    description: >
      Holds a set of dsl required resources
    default:
      - {'source_path': 'http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml', 'destination_path': '/spec/openstack-plugin/2.0.1/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml', 'destination_path': '/spec/fabric-plugin/1.4.2/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml', 'destination_path': '/spec/diamond-plugin/1.3.5/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml', 'destination_path': '/spec/cloudify/4.0.1/types.yaml'}

  #############################
  # Dev Inputs
  #############################

  # Some plugins installed from sources require compilation - installs a
  # compiler and the python headers to allow that.
  install_python_compilers:
    type: boolean
    default: false

  #############################
  # Telecom Edition
  #############################
  telecom_edition:
    description: >
      Set this to true if you want Telecom Edition
    type: boolean
    default: false

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }
    nova_url: { get_input: nova_url }
    neutron_url: { get_input: neutron_url }
    custom_configuration:
      keystone_client:
        insecure: { get_input: skip_openstack_cert_verification }
      nova_client:
        insecure: { get_input: skip_openstack_cert_verification }
      neutron_client:
        insecure: { get_input: skip_openstack_cert_verification }
      cinder_client:
        insecure: { get_input: skip_openstack_cert_verification }

######################################################################
# These nodes comprise the manager's infrastructure and components
######################################################################
node_templates:

  # #####################################################################
  # The manager_configuration node is meant to be read by Cloudify to
  # provide runtime configuration and information for the CLI and the
  # Manager.
  # #####################################################################
  manager_resources:
    type: cloudify.nodes.ManagerResources
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  manager_configuration:
    type: cloudify.nodes.MyCloudifyManager
    properties:
      ssh_user: { get_input: ssh_user }
      ssh_port: { get_input: ssh_port }
      ssh_key_filename: { get_input: ssh_key_filename }
      agent_local_key_path: { get_input: agent_private_key_path }
      cloudify:
        plugins:
          openstack_config_path: /etc/cloudify/openstack_plugin/openstack_config.json

        resources_prefix: { get_input: resources_prefix }

        cloudify_agent:
          min_workers: 0
          max_workers: 5
          remote_execution_port: 22
          user: { get_input: agents_user }
          broker_user: { get_input: rabbitmq_username }
          broker_pass: { get_input: rabbitmq_password }
          broker_ssl_enabled: true
          env:
            OPENSTACK_CONFIG_PATH: { get_property: [SELF, cloudify, plugins, openstack_config_path] }

        workflows:
          task_retries: { get_input: workflow_task_retries }
          task_retry_interval: { get_input: workflow_task_retry_interval }

        policy_engine:
          start_timeout: 30

        # Declare rules for the default import resolver
        # which enables using the manager in offline mode.
        # The resolver replaces an import's http link with the local path
        # on the manager according to the matching rule's value.
        # If the resolver cannot read the import from the specified local path
        # (e.g. when the manager is not in offline mode),
        # it will fall back to the original http link.
        import_resolver:
          parameters:
            rules: { get_input: import_resolver_rules }

        upload_resources:
          dsl_resources: { get_input: dsl_resources }

    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: components/manager/scripts/openstack/configure.py
            task_name: configure
            task_properties:
              openstack_config: *openstack_configuration
            hide_output: &hide_output
              - running
            fabric_env: &manager_fabric_env
              user: { get_input: ssh_user }
              port: { get_input: ssh_port }
              key_filename: { get_property: [management_keypair, private_key_path] }
              host_string: { get_attribute: [manager_server_ip, floating_ip_address] }
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: components/manager/scripts/configure_manager.py
            hide_output: *hide_output
            fabric_env:
              <<: *manager_fabric_env
              always_use_pty: true

    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            postconfigure:
              implementation: components/manager/scripts/set_manager_ips.py
              inputs:
                public_ip: { get_attribute: [manager_server_ip, floating_ip_address] }
                rest_host_internal_endpoint_type: { get_property: [rest_service, rest_host_internal_endpoint_type] }
                rest_host_external_endpoint_type: { get_property: [rest_service, rest_host_external_endpoint_type] }
      - type: cloudify.relationships.depends_on
        target: manager_server_ip

  management_keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: { get_input: use_existing_manager_keypair }
      resource_id: { get_input: manager_public_key_name }
      private_key_path: { get_input: ssh_key_filename }
      openstack_config: *openstack_configuration

  agent_keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: { get_input: use_existing_agent_keypair }
      resource_id: { get_input: agent_public_key_name }
      private_key_path: { get_input: agent_private_key_path }
      openstack_config: *openstack_configuration

  management_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: management_network_name }
      openstack_config: *openstack_configuration

  management_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: management_subnet_name }
      subnet:
        ip_version: 4
        cidr: 172.16.0.0/16
        dns_nameservers: { get_input: management_subnet_dns_nameservers }
      openstack_config: *openstack_configuration
    relationships:
      - target: management_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  manager_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_configuration
      resource_id: { get_input: manager_port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: management_network
      - type: cloudify.relationships.depends_on
        target: management_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: management_security_group

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: { get_input: management_router }
      openstack_config: *openstack_configuration
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  agents_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: { get_input: agents_security_group_name }
      security_group:
        description: Security group for Cloudify agent VMs
      rules:
        - port: 22
          remote_ip_prefix: { get_property: [management_subnet, subnet, cidr] }
        - port: 5985
          remote_ip_prefix: { get_property: [management_subnet, subnet, cidr] }
      openstack_config: *openstack_configuration

  management_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: { get_input: manager_security_group_name }
      security_group:
        description: Security group for Cloudify Manager VM
      rules:
        - port: 80
          remote_ip_prefix: 0.0.0.0/0
        - port: 443
          remote_ip_prefix: 0.0.0.0/0
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - port: 5671
          remote_ip_prefix: { get_property: [management_subnet, subnet, cidr] }
        - port: 53333
          remote_ip_prefix: { get_property: [management_subnet, subnet, cidr] }
        # Cluster-related ports, only used in a manager cluster
        - port: 8300
          remote_ip_prefix: 0.0.0.0/0
        - port: 8301
          remote_ip_prefix: 0.0.0.0/0
        - port: 8500
          remote_ip_prefix: 0.0.0.0/0
        - port: 22000
          remote_ip_prefix: 0.0.0.0/0
        - port: 15432
          remote_ip_prefix: 0.0.0.0/0
      openstack_config: *openstack_configuration

  manager_server_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  manager_host:
    type: cloudify.openstack.nodes.Server
    properties:
      resource_id: { get_input: manager_server_name }
      install_agent: false
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }
      management_network_name: { get_property: [management_network, resource_id] }
      openstack_config: *openstack_configuration
    relationships:
      - target: management_keypair
        type: cloudify.openstack.server_connected_to_keypair
      - target: manager_port
        type: cloudify.openstack.server_connected_to_port
      - target: manager_server_ip
        type: cloudify.openstack.server_connected_to_floating_ip

  # #####################################################################
  # The Python and Java nodes are used to provide runtime environments
  # on specific hosts. It allows us to define the runtime environment
  # and install it only once per host and then have a node depend on it.
  # Note that Erlang and NodeJS are also installed as runtime envs as
  # part of the RabbitMQ and Stage nodes respectively but as they're not
  # used by multiple nodes, we're not specifying them as independent
  # entities.
  # #####################################################################
  python_runtime:
    type: manager.nodes.PythonRuntime
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  java_runtime:
    type: manager.nodes.JavaRuntime
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  ######################################################################
  # These are the nodes comprising the Cloudify Manager's components
  ######################################################################
  consul:
    type: manager.nodes.Consul
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources

  rabbitmq:
    type: manager.nodes.RabbitMQ
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  syncthing:
    type: manager.nodes.Syncthing
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: consul

  postgresql:
    type: manager.nodes.Postgresql
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: consul

  logstash:
    type: manager.nodes.Logstash
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: logstash_to_postgresql
        target: postgresql
      - type: logstash_to_rabbitmq
        target: rabbitmq

  influxdb:
    type: manager.nodes.InfluxDB
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  nginx:
    type: manager.nodes.Nginx
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: rest_service
      - type: nginx_to_manager_configuration
        target: manager_configuration

  riemann:
    type: manager.nodes.Riemann
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: riemann_to_manager_configuration
        target: manager_configuration
      - type: riemann_to_rabbitmq
        target: rabbitmq
      - type: riemann_to_nginx
        target: nginx

  rest_service:
    type: manager.nodes.RestService
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: rest_to_manager_configuration
        target: manager_configuration
      - type: restservice_to_postgresql
        target: postgresql
      - type: restservice_to_rabbitmq
        target: rabbitmq

  mgmt_worker:
    type: manager.nodes.ManagementWorker
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: mgmtworker_to_rabbitmq
        target: rabbitmq
      - type: mgmtworker_to_manager_configuration
        target: manager_configuration

  amqp_influx:
    type: manager.nodes.AmqpInfluxBroker
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: amqpinflux_to_rabbitmq
        target: rabbitmq
      - type: amqpinflux_to_influxdb
        target: influxdb

  stage:
    type: manager.nodes.Stage
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: stage_to_restservice
        target: rest_service
      - type: stage_to_influxdb
        target: influxdb

  #################################
  # Sanity
  #################################
  sanity:
    type: manager.nodes.Sanity
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: sanity_to_mgr_config
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: cloudify.relationships.depends_on
        target: postgresql
      - type: cloudify.relationships.depends_on
        target: logstash
      - type: cloudify.relationships.depends_on
        target: influxdb
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: cloudify.relationships.depends_on
        target: riemann
      - type: cloudify.relationships.depends_on
        target: rest_service
      - type: cloudify.relationships.depends_on
        target: mgmt_worker
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: amqp_influx

  ######################################################################
  # Enable this node if you want to have the CLI installed within
  # the manager. This might aid in debugging problems or just
  # controlling the manager from within itself.
  ######################################################################
  # cli:
  #   type: manager.nodes.CLI
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: manager_host
  #     - type: cloudify.relationships.depends_on
  #       target: nginx
  #     - type: cloudify.relationships.depends_on
  #       target: rest_service

plugins:
  cli:
    install: false
    executor: central_deployment_agent

outputs:
  manager_ip:
    value: { get_attribute: [manager_server_ip, floating_ip_address] }
  rest_server_public_certificate:
    value: { get_attribute: [manager_configuration, external_rest_cert_content] }
  private_ip:
    value: { get_attribute: [ manager_host, ip ]}
