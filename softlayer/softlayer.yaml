tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2m2/types.yaml
  - http://www.getcloudify.org/spec/softlayer-plugin/1.2m2/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.2m2/plugin.yaml

inputs:

  username:
    type: string

  api_key:
    type: string

  endpoint_url:
    type: string

  location:
    type: string

  domain:
    type: string

  ram:
    type: integer

  cpu:
    type: integer

  disk:
    type: integer

  os:
    type: integer

  image_template_id:
    type: string
    default: ''

  image_template_global_id:
    type: string
    default: ''

  private_network_only:
    type: boolean
    default: false

  port_speed:
    type: integer
    default: 187

  private_vlan:
    default: ''

  public_vlan:
    default: ''

  provision_scripts:
    default: []

  ssh_keys:
    default: []

  agents_user:
    type: string
    default: root

  ssh_key_filename:
    type: string
    default: ~/.ssh/id_rsa

  resources_prefix:
    default: ''
    type: string

node_templates:
  manager_host:
    type: cloudify.softlayer.nodes.VirtualServer
    properties:
      install_agent: false

      api_config: { get_property: [softlayer_configuration, api_config] }

      location: { get_input: location }
      domain: { get_input: domain }
      ram: { get_input: ram }
      cpu: { get_input: cpu }
      disk: { get_input: disk }
      os: { get_input: os }
      image_template_id: { get_input: image_template_id }
      image_template_global_id: { get_input: image_template_global_id }
      private_network_only: { get_input: private_network_only }
      port_speed: { get_input: port_speed }
      private_vlan: { get_input: private_vlan }
      public_vlan: { get_input: public_vlan }
      provision_scripts: { get_input: provision_scripts }
      ssh_keys: { get_input: ssh_keys }

  softlayer_configuration:
    type: softlayer_configuration
    properties:
      api_config:
        username: { get_input: username }
        api_key: { get_input: api_key }
        endpoint_url: { get_input: endpoint_url }

  manager:
    type: cloudify.nodes.CloudifyManager
    properties:
      cloudify_packages:
        server:
          components_package_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/m2-RELEASE/cloudify-components_3.2.0-m2-b171_amd64.deb
          core_package_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/m2-RELEASE/cloudify-core_3.2.0-m2-b171_amd64.deb
          ui_package_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/m2-RELEASE/cloudify-ui_3.2.0-m2-b171_amd64.deb
        agents:
          ubuntu_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/m2-RELEASE/cloudify-ubuntu-agent_3.2.0-m2-b171_amd64.deb
          centos_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/m2-RELEASE/cloudify-centos-final-agent_3.2.0-m2-b171_amd64.deb
          windows_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.2.0/m2-RELEASE/cloudify-windows-agent_3.2.0-m2-b171_amd64.deb

      cloudify:
        resources_prefix: { get_input: resources_prefix }

        cloudify_agent:
          min_workers: 2
          max_workers: 5
          remote_execution_port: 22
          user: { get_input: agents_user }
          agent_key_path: {get_input: ssh_key_filename}

        workflows:
          task_retries: -1  # this means forever
          task_retry_interval: 30

        policy_engine:
          start_timeout: 30

    relationships:
      -  type: cloudify.relationships.contained_in
         target: manager_host

    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/configure.py
            task_name: configure
            task_properties:
              softlayer_api_config: { get_property: [softlayer_configuration, api_config] }
              ssh_keys: { get_input: ssh_keys }
            fabric_env:
              user: { get_input: agents_user }
              key_filename: { get_input: ssh_key_filename }
              host_string: { get_attribute: [manager_host, public_ip] }
        start:
          implementation: fabric.fabric_plugin.tasks.run_module_task
          inputs:
            task_mapping: cloudify_cli.bootstrap.tasks.bootstrap
            task_properties:
              cloudify_packages: { get_property: [manager, cloudify_packages] }
              agent_local_key_path: { get_input: ssh_key_filename }
              manager_private_ip: { get_attribute: [manager_host, ip]}
              provider_context: { get_attribute: [manager, provider_context] }
            fabric_env:
              user: { get_input: agents_user }
              key_filename: { get_input: ssh_key_filename }
              host_string: { get_attribute: [manager_host, public_ip] }
      cloudify.interfaces.validation:
        creation:
          implementation: cli.cloudify_cli.bootstrap.tasks.creation_validation
          inputs:
            cloudify_packages: { get_property: [manager, cloudify_packages] }

plugins:
  cli:
    install: false
    executor: central_deployment_agent

outputs:
  manager_ip:
    value: { get_attribute: [manager_host, public_ip] }
