#!/bin/bash -e

function sys_error
{
    ctx logger error "${1:-UNKNOWN} (status $?)"
    exit 1
}

# DEPRECATED
function log
{
    level=$1
    message=$2
    timestamp=$(date +"%Y-%m-%dT%T%z")

    echo "### ${timestamp}, ${level}: ${message}"
}

function create_virtualenv
{
    virtualenv_path=$1

    ctx logger info "Creating Virtualenv ${virtualenv_path} if it doesn't exist..."
    [ -f "$virtualenv_path/bin/python" ] && ctx logger info "Virtualenv directory already exists..." && return 0
    ctx logger info "Creating virtualenv ${virtualenv_path}..."
    sudo virtualenv ${virtualenv_path} >/dev/null
}

function create_dir
{
    dir=$1

    if [ -d $dir ]; then
        return 0
    fi

    ctx logger info "Creating directory ${dir}..."
    sudo mkdir -p ${dir}
}

function install_module
{
    module=$1
    venv=${2:-""}

    if [[ ! -z "${venv}" ]]; then
        ctx logger info "Installing ${module} in virtualenv ${venv}..."
        sudo ${venv}/bin/pip install ${module} --upgrade >/dev/null
    else
        ctx logger info "Installing ${module}..."
        sudo pip install ${module} --upgrade >/dev/null
    fi
}

function clean_tmp
{
    ctx logger info "Cleaning up /tmp..."
    sudo rm -rf /tmp/*
}

function curl_download_with_retries
{
    ###
    # This will download a file.
    # It will retry 10 times; provide an error if failure occurs rather than an html page;
    # no output will be shows other than errors, and any directory structure required
    # for the download will be created automatically.
    ###
    source=$1
    destination=$2

    # this will use an exponential backoff algorithm 10 times before it fails.
    curl --retry 10 --fail --silent --show-error --location ${source} --create-dirs --output ${destination}
}

function wget_download_with_retries
{
    source=$1
    destination=$2

    wget --tries=10 --quiet --output-document=${destination_file} ${url}
}

function download_file
{
    ###
    # This will download a file whether by using cURL (first) or wget (second)
    # if a destination file path is provided, it will be downloaded to that path.
    # if not, the file will be downloaded to a tmp path and the path will be
    # echoed so that it can be used as a return value.
    # If the destination file already exists, it will be echoed back without being downloaded.
    ###
    url=$1
    destination_file=$2

    set +e
    curl_cmd=$(which curl)
    set -e

    if [[ -z ${destination_file} ]]; then
        destination_file="/tmp/${RANDOM}.file"
    fi

    if [[ ! -e ${destination_file} ]]; then
        if [[ ! -z ${curl_cmd} ]]; then
            ctx logger info "Downloading ${url} to ${destination_file}..."
            curl_download_with_retries ${url} ${destination_file}
        # elif [[ ! -z ${wget_cmd} ]]; then
        #     ctx logger info "Downloading ${url} to ${destination_file}..."
        #     # should create dir struct here as wget doesn't do it for us
        #     wget_download_with_retries ${url} ${destination_file}
        else
            sys_error "Cannot download ${url}. 'cURL' was not found on the system."
        fi
    else
        ctx logger info "File ${destination_file} already exists..."
    fi
    echo ${destination_file}
}

function download_cloudify_resource() {
    url=$1
    destination_file="${CLOUDIFY_SOURCES_PATH}/$(get_file_name $url)"

    ctx logger info "Downloading ${url}..."
    if [ -f "${destination_file}" ]; then
        ctx logger info "Resource already exists (${destination_file}). Skipping..."
    else
        tmppath=$(download_file "${url}")
        ctx logger info "Saving ${tmppath} under ${destination_file}..."
        create_dir "${CLOUDIFY_SOURCES_PATH}/"
        sudo mv "${tmppath}" "${destination_file}"
    fi
    echo ${destination_file}
}

function copy_notice() {
    ###
    # This is a generic implementation for copying NOTICE files for different
    # services to /opt.
    ###
    service=$1

    destination_notice="/opt/${service}_NOTICE.txt"
    if [ -f $destination_notice ]; then
        ctx logger info "NOTICE file ${destination_notice} already exists. Skipping..."
        return 0
    fi
    ctx logger info "Copying ${service} NOTICE file to ${destination_notice}..."
    notice_file=$(ctx download-resource "components/${service}/NOTICE.txt")
    sudo mv ${notice_file} ${destination_notice}
}

function wait_for_port
{
    ###
    # services sometime take time to load. This allows us to wait for their
    # port to open before we continue with other operations.
    # for instance, before we create Elasticsearch mapping, we run Elasticsearch
    # and wait for its port to be opened.
    ###
    port=$1
    host=${2:-localhost}

    counter=1

    ctx logger info "Waiting for ${host}:${port} to become available..."
    while ! echo exit | curl --silent http://${host}:${port} >/dev/null;
    do
            if [[ $counter -gt 24 ]]; then
                sys_error "Failed to connect to port ${port}... (status $?)"
            fi
            ctx logger info "Port ${port} not available yet, retrying... ($counter/24)"
            sleep 5;
            counter=$((counter+1))
    done
    ctx logger info "Port ${port} is available!"
}

function yum_install() {
    ###
    # yum supports installing from URL, path and the default yum repo
    # configured within your image.
    # you can specify one of the following:
    # [yum install -y] mylocalfile.rpm
    # [yum install -y] mypackagename
    #
    # If the source is a package name, it will check whether it is already
    # installed.
    # If it is, it will do nothing. It not, it will install it.
    #
    # If the source is a url to an rpm and the file doesn't already exist
    # in a predesignated archives file path (${CLOUDIFY_SOURCES_PATH}/),
    # it will download it. It will then use that file to check if the
    # package is already installed.
    # If it is, it will do nothing. It not, it will install it.
    #
    # NOTE: This will currently not take into considerations situations
    # in which a file was downloaded partially. If a file is partially
    # downloaded, a redownload will not take place and rather an
    # installation will be attempted, which will obviously fail since
    # the rpm file is incomplete.
    #
    # ALSO NOTE: you cannot run yum_install and provide it with a space
    # separated array of packages as you can with yum install. You must
    # provide one package per invocation.
    ###
    source=$1
    source_name=$(get_file_name $source)
    extension="${source_name##*.}"
    archive_path=$source_name

    if [ "$extension" == "rpm" ]; then
        archive_path="${CLOUDIFY_SOURCES_PATH}/$source_name"
        ctx logger info "Checking if rpm file $archive_path exists..."
        if [ ! -f "$archive_path" ]; then
            tmp_path=$(download_file $source)
            create_dir "${CLOUDIFY_SOURCES_PATH}/"
            ctx logger info "Saving ${source_name} under ${CLOUDIFY_SOURCES_PATH}/..."
            sudo mv $tmp_path $archive_path
        fi
        source_name=$(rpm -qp $archive_path)
    fi

    ctx logger info "Checking if $archive_path is already installed..."
    if rpm -q $source_name 2>&1 >/dev/null; then
        ctx logger info "Package ${source} is already installed."
        return 0
    fi

    ctx logger info "yum Installing ${archive_path}..."
    sudo yum install -y ${archive_path} >/dev/null
}

function configure_systemd_service() {
    ###
    # This configure systemd for a specific service.
    # It requires that two files are present for each service one containing
    # the environment variables and one contains the systemd config.
    # All env files will be named "cloudify-SERVICENAME".
    # All systemd config files will be named "cloudify-SERVICENAME.service".
    ###
    service_name=$1

    service_identifier="cloudify-${service_name}"

    env_dir="/etc/sysconfig/${service_identifier}"
    service_dir="/usr/lib/systemd/system/${service_identifier}.service"
    env_file="components/${service_name}/config/${service_identifier}"
    service_file="components/${service_name}/config/${service_identifier}.service"

    ctx logger info "Deploying systemd EnvironmentFile..."
    deploy_blueprint_resource ${env_file} ${env_dir}

    ctx logger info "Deploying systemd .service file..."
    deploy_blueprint_resource ${service_file} ${service_dir}

    ctx logger info "Enabling systemd .service..."
    sudo systemctl enable ${service_identifier}.service &>/dev/null
    sudo systemctl daemon-reload >/dev/null
}

function get_systemd_vars_file_path() {
    ###
    # Returns the path to a systemd environment variables file
    # for a given service_name. (e.g. /etc/sysconfig/cloudify-rabbitmq)
    ###
    service_name=$1

    service_identifier="cloudify-${service_name}"

    echo "/etc/sysconfig/${service_identifier}"
}

function get_systemd_service_file_path() {
    ###
    # Returns the path to a systemd service file
    # for a given service_name. (e.g. /usr/lib/systemd/system/cloudify-rabbitmq.service)
    ###
    service_name=$1

    service_identifier="cloudify-${service_name}"

    echo "/usr/lib/systemd/system/${service_identifier}.service"
}

function deploy_blueprint_resource() {
    ###
    # Deploys a blueprint resource to a given path.
    ###
    source_path=$1
    destination_path=$2

    ctx logger info "Deploying ${source_path} to ${destination_path}..."
    tmp_file=$(ctx download-resource-and-render ${source_path})
    sudo mv ${tmp_file} ${destination_path}
}

function get_file_name() {
    ###
    # Extracts a file name from a path or url
    ###
    string="$1"; echo "${string##*/}"
}

function replace() {
    this=$1
    with_this=$2
    in_here=$3

    ctx logger info "Replacing ${this} with ${with_this} in ${in_here}..."
    # using pipe prevents / from having to be escaped
    sudo sed -i "s|${this}|${with_this}|g" ${in_here}
}

function inject_service_env_var() {
    ###
    # Injects a variable into a service's env var file
    ###
    field=$1
    value=$2
    service_name=$3

    ctx logger info "Injecting variable..."
    vars_path=$(get_systemd_vars_file_path "${service_name}")
    replace "${field}" "${value}" $vars_path >/dev/null
}

function get_selinux_state() {
    ###
    # This checks whether SELinux is Enforcing or Permissive
    ###
    set +e
    selinux_mode=$(getenforce)
    set -e

    if [[ ! -z ${selinux_mode} ]]; then
        echo ${selinux_mode}
    else
        echo "None"
    fi
}

function set_selinux_permissive() {
    # This will cause failures after reboots if a node has been manually set permissive using setenforce but
    # not in the selinux config before running this
    ctx logger info "Checking if SELinux is enforced..."
    if [ "$(get_selinux_state)" == 'Enforcing' ]; then
        ctx logger info "SELinux is enforcing, setting SELinux Permissive State..."
        sudo setenforce Permissive
        sudo sed -i 's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config
    else
        ctx logger info "SELinux not enforced."
    fi
}

function set_rabbitmq_policy() {
    ###
    # Sets RabbitMQ Policies
    ###

    policy_name=$1
    queue_regex=$2
    policy_type=$3
    value=$4

    ctx logger info "Setting Policy ${policy_name} on queues ${queue_regex} of type ${policy_type} with value ${value}..."
    sudo rabbitmqctl set_policy ${policy_name} "${queue_regex}" "{"\"${policy_type}"\":${value}}" --apply-to queues
}

function create_service_user() {
    ###
    # This create a user. It will not create the home dir for it
    # and assume that it already exists.
    # This user will only be created if it didn't already exist.
    ###
    user=$1
    home=$2

    ctx logger info "Checking if ${user} exists..."
    ret=false
    getent passwd $1 >/dev/null 2>&1 && ret=true

    if $ret; then
        ctx logger info "User ${user} already exists..."
    else
        ctx logger info "Creating user ${user} with home ${home}..."
        sudo useradd --shell /sbin/nologin --home-dir "${home}" --no-create-home --system "${user}"
    fi
}

function clean_var_log_dir() {
    ###
    # Cleans up unused /var/log directory for named application.
    # Directory must be empty or this will fail.
    ###
    service=$1

    for log in $(find /var/log/${service} -type f 2> /dev/null); do
        # Copy to timestamped file in case this is run again
        if [ ! -f ${log} ]; then
            break
        fi
        sudo mv ${log} /var/log/cloudify/${service}/${log##/var/log/${service}/}-from_bootstrap-$(date +%Y-%m-%dT%T%z)
    done
    # Remove the directory if it's empty, ignoring failures due to lack of directory
    # This won't remove /var/log if ${service} is empty, unless /var/log is empty.
    # It will, however, error if its target dir is non-empty

    ctx logger info "Removing unnecessary logs directory: /var/log/${service}"
    sudo rm -df /var/log/${service}
}

function run_command_with_retries() {
    # Logging should be improved with consideration given to possible command injection accidents or attacks
    ctx logger info "Attempting to run ${1} with up to 5 retries"
    max_retries=5
    retried=0
    while ! ${*}; do
        # Better logging would be good
        ctx logger info "Command ${1} failed, retrying in 1 second."
        retried=$(( ${retried} + 1 ))
        sleep 1
        if [[ ${retried} -eq ${max_retries} ]]; then
            # Better logging would be good
            ctx logger info "Max retries for command ${1} exceeded, aborting."
            break
        fi
    done
}

function run_noglob_command_with_retries() {
    # Logging should be improved with consideration given to possible command injection accidents or attacks
    ctx logger info "Attempting to run ${1} with up to 5 retries"
    max_retries=5
    retried=0
    while ! sh -c -f "${*}"; do
        # Better logging would be good
        ctx logger info "Command ${1} failed, retrying in 1 second."
        retried=$(( ${retried} + 1 ))
        sleep 1
        if [[ ${retried} -eq ${max_retries} ]]; then
            # Better logging would be good
            ctx logger info "Max retries for command ${1} exceeded, aborting."
            break
        fi
    done
}

function extract_github_archive_to_tmp () {
    repo=${1}
    if [[ "$(file ${repo})" =~ 'Zip archive data' ]]; then
        # This is a zip, unzip it, assuming it is a github style zip
        unzip ${repo} -d /tmp/github-archive-tmp > /dev/null
        # Performing a strip-components equivalent, but the github style zips have
        # an extra leading directory
        # Using copy+delete to avoid errors when mv finds a target dir exists
        cp -r /tmp/github-archive-tmp/*/* /tmp
        rm -rf /tmp/github-archive-tmp
    else
        # We are expecting a tar.gz, untar it
        tar -xzf ${repo} --strip-components=1 -C "/tmp"
    fi
}

function deploy_ssl_certificate () {
  private_or_public=${1}
  destination=${2}
  group=${3}
  cert=${4}

  # Root owner, with permissions set below, allow anyone to read a public cert, and allow the owner to read a private cert, but not change it, mitigating risk in the event of the associated service being vulnerable.
  ownership=root.${group}

  if [[ ${private_or_public} == "private" ]]; then
    # This check should probably be done using an openssl command
    if [[ "${cert}" =~ "PRIVATE KEY" ]]; then
      # Owner read, Group read, Others no access
      permissions=440
    else
      sys_error "Private certificate is expected to begin with a line containing 'PRIVATE KEY'."
    fi
  elif [[ ${private_or_public} == "public" ]]; then
    # This check should probably be done using an openssl command
    if [[ "${cert}" =~ "BEGIN CERTIFICATE" ]]; then
      # Owner read, Group read, Others read
      permissions=444
    else
      # This should probably be done using an openssl command
      sys_error "Public certificate is expected to begin with a line containing 'BEGIN CERTIFICATE'."
    fi
  else
    sys_error "Certificates may only be 'private' or 'public', not '${private_or_public}'"
  fi

  ctx logger info "Deploying ${private_or_public} SSL certificate in ${destination} for group ${group}"
  echo "${cert}" | sudo tee ${destination} >/dev/null

  ctx logger info "Setting permissions (${permissions}) and ownership (${ownership}) of SSL certificate at ${ddestination}"
  # Set permissions first as the tee with sudo should mean its owner and group are root, leaving a negligible window for it to be accessed by an unauthorised user
  sudo chmod ${permissions} ${destination}
  sudo chown ${ownership} ${destination}
}

function deploy_logrotate_config() {
    ###
    # Deploys a logrotate configuration for a specific service.
    ###
    service=$1

    logrotate_config_path="/etc/logrotate.d/${service}"

    ctx logger info "Configuring logrotate for ${service}..."
    deploy_blueprint_resource "components/${service}/config/logrotate" ${logrotate_config_path}
    sudo chmod 644 ${logrotate_config_path}
}


CLOUDIFY_SOURCES_PATH="/opt/cloudify/sources"
