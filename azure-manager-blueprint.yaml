tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-azure-plugin/1.4.1/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml
  - types/manager-types.yaml
  - inputs/manager-inputs.yaml

inputs:
  resource_prefix:
    default: cfymgr

  resource_suffix:
    default: 10

  subscription_id:
    type: string
    required: true

  tenant_id:
    type: string
    required: true

  client_id:
    type: string
    required: true

  client_secret:
    type: string
    required: true

  location:
    type: string
    required: true
    default: eastus

  retry_after:
    type: integer
    default: 60

  # Networking
  subnet_private_cidr:
    type: string
    required: true
    default: 10.10.0.0/16

  # VM inputs
  vm_size:
    type: string
    default: Standard_A3
    required: true

  vm_os_family:
    type: string
    default: linux
    required: true

  vm_image_publisher:
    type: string
    default: OpenLogic
    required: true

  vm_image_offer:
    type: string
    default: CentOS
    required: true

  vm_image_sku:
    type: string
    default: '7.0'
    required: true

  vm_image_version:
    type: string
    default: latest
    required: true

  vm_os_username:
    type: string
    default: cloudify
    required: true

  vm_os_password:
    type: string
    default: Cl0ud1fy!
    required: true

  vm_os_pubkeys:
    required: true

  vm_os_pubkey_auth_only:
    type: boolean
    required: true
    default: true

  # Manager voodoo
  plugin_resources:
    description: >
      Holds any archives that should be uploaded to the manager.
    default:
    - 'http://repository.cloudifysource.org/org/cloudify3/3.3.1/sp-RELEASE/cloudify_fabric_plugin-1.3.1-py27-none-linux_x86_64-centos-Core.wgn'
    - 'http://repository.cloudifysource.org/org/cloudify3/3.3.1/sp-RELEASE/cloudify_diamond_plugin-1.3.1-py27-none-linux_x86_64-redhat-Maipo.wgn'
    - 'http://repository.cloudifysource.org/org/cloudify3/3.3.1/sp-RELEASE/cloudify_diamond_plugin-1.3.1-py27-none-linux_x86_64-centos-Core.wgn'
    - 'http://repository.cloudifysource.org/org/cloudify3/3.3.1/sp-RELEASE/cloudify_diamond_plugin-1.3.1-py26-none-linux_x86_64-centos-Final.wgn'
    - 'http://repository.cloudifysource.org/org/cloudify3/3.3.1/sp-RELEASE/cloudify_diamond_plugin-1.3.1-py27-none-linux_x86_64-Ubuntu-precise.wgn'
    - 'http://repository.cloudifysource.org/org/cloudify3/3.3.1/sp-RELEASE/cloudify_diamond_plugin-1.3.1-py27-none-linux_x86_64-Ubuntu-trusty.wgn'

  dsl_resources:
    description: >
      Holds a set of dsl required resources
    default:
    - {'source_path': 'http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml', 'destination_path': '/spec/fabric-plugin/1.4.2/plugin.yaml'}
    - {'source_path': 'http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml', 'destination_path': '/spec/diamond-plugin/1.3.5/plugin.yaml'}
    - {'source_path': 'http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml', 'destination_path': '/spec/cloudify/4.0.1/types.yaml'}

  # Auth inputs
  ssh_user:
    type: string
    default: { get_input: vm_os_username }

  ssh_port:
    type: string
    default: 22
    description: >
      Manager SSH port

  ssh_key_filename:
    type: string
    required: true

  azure_config:
    default:
      subscription_id: { get_input: subscription_id }
      tenant_id: { get_input: tenant_id }
      client_id: { get_input: client_id }
      client_secret: { get_input: client_secret }

  agent_remote_key_path:
    type: string
    default: '/home/cloudify/.ssh/agent_kp.pem'

  agent_local_key_path:
    type: string
    default: '~/.ssh/id_rsa'

  #############################
  # Upload Resources Inputs
  #############################
  plugin_resources:
    description: >
      Holds any archives that should be uploaded to the manager.
    default:
      - 'http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-aws-plugin/1.4.1/cloudify_aws_plugin-1.4.1-py27-none-linux_x86_64-centos-Core.wgn'
      - 'http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-aws-plugin/1.4.1/cloudify_aws_plugin-1.4.1-py27-none-linux_x86_64-redhat-Maipo.wgn'
      - 'http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-fabric-plugin/1.4.1/cloudify_fabric_plugin-1.4.1-py27-none-linux_x86_64-centos-Core.wgn'
      - 'http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-diamond-plugin/1.3.3/cloudify_diamond_plugin-1.3.3-py27-none-linux_x86_64-redhat-Maipo.wgn'
      - 'http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-diamond-plugin/1.3.3/cloudify_diamond_plugin-1.3.3-py27-none-linux_x86_64-centos-Core.wgn'
      - 'http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-diamond-plugin/1.3.3/cloudify_diamond_plugin-1.3.3-py26-none-linux_x86_64-centos-Final.wgn'
      - 'http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-diamond-plugin/1.3.3/cloudify_diamond_plugin-1.3.3-py27-none-linux_x86_64-Ubuntu-precise.wgn'
      - 'http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-diamond-plugin/1.3.3/cloudify_diamond_plugin-1.3.3-py27-none-linux_x86_64-Ubuntu-trusty.wgn'

  dsl_resources:
    description: >
      Holds a set of dsl required resources
    default:
      - {'source_path': 'http://www.getcloudify.org/spec/aws-plugin/1.4.3/plugin.yaml', 'destination_path': '/spec/aws-plugin/1.4.3/plugin.yaml'}

      - {'source_path': 'http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml', 'destination_path': '/spec/fabric-plugin/1.4.2/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml', 'destination_path': '/spec/diamond-plugin/1.3.5/plugin.yaml'}
      - {'source_path': 'http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml', 'destination_path': '/spec/cloudify/4.0.1/types.yaml'}

  #############################
  # Dev Inputs
  #############################

  # Note that `install_python_compilers` must not be an empty string if one of the
  # below modules require compilation.
  install_python_compilers:
    type: string
    default: ''

  #############################
  # Telecom Edition
  #############################
  telecom_edition:
    description: >
      Set this to true if you want Telecom Edition
    type: boolean
    default: false

dsl_definitions:
  azure_configuration: &azure_configuration
    subscription_id: { get_input: subscription_id }
    tenant_id: { get_input: tenant_id }
    client_id: { get_input: client_id }
    client_secret: { get_input: client_secret }
    location: { get_input: location }
    ssh_username: { get_input: ssh_user }

node_templates:

  # #####################################################################
  # The manager_configuration node is meant to be read by Cloudify to
  # provide runtime configuration and information for the CLI and the
  # Manager.
  # #####################################################################


  manager_resources:
    type: cloudify.nodes.ManagerResources
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration

  manager_configuration:
    type: cloudify.nodes.MyCloudifyManager
    properties:
      ssh_user: { get_input: ssh_user }
      ssh_key_filename: { get_input: ssh_key_filename }
      agent_local_key_path: { get_input: agent_local_key_path }
      agent_remote_key_path: { get_input: agent_remote_key_path }
      cloudify:
        plugins:
          # Absolute paths only
          azure_config_path: /opt/cloudify_azure_provider.conf

        cloudify_agent:
          min_workers: 0
          max_workers: 5
          remote_execution_port: 22
          user: { get_input: ssh_user }
          broker_user: { get_input: rabbitmq_username }
          broker_pass: { get_input: rabbitmq_password }
          broker_ssl_enabled: true
          env:
            CFY_AZURE_CONFIG_PATH: { get_property: [SELF, cloudify, plugins, azure_config_path] }

        workflows:
          task_retries: { get_input: workflow_task_retries }
          task_retry_interval: { get_input: workflow_task_retry_interval }

        policy_engine:
          start_timeout: 30

        # Declare rules for the default import resolver
        # which enables using the manager in offline mode.
        # The resolver replaces an import's http link with the local path
        # on the manager according to the matching rule's value.
        # If the resolver cannot read the import from the specified local path
        # (e.g. when the manager is not in offline mode),
        # it will fall back to the original http link.
        import_resolver:
          parameters:
            rules: { get_input: import_resolver_rules }

        upload_resources:
          plugin_resources: { get_input: plugin_resources }
          dsl_resources: { get_input: dsl_resources }

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: components/manager/scripts/configure_manager.py
            hide_output: &hide_output
              - running
            fabric_env: &manager_fabric_env
              user: { get_input: ssh_user }
              key_filename: { get_input: ssh_key_filename }
              host_string: { get_attribute: [manager_host, public_ip] }
              always_use_pty: true
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: components/manager/scripts/azure/configure.py
            task_name: configure_manager
            fabric_env:
              <<: *manager_fabric_env
              always_use_pty: true
            task_properties:
              manager_config: *azure_configuration
              manager_config_path: { get_property: [SELF, cloudify, plugins, azure_config_path] }
            hide_output: *hide_output
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            postconfigure:
              implementation: components/manager/scripts/set_manager_ips.py
              inputs:
                public_ip: { get_attribute: [manager_host, public_ip] }
                rest_host_internal_endpoint_type: { get_property: [rest_service, rest_host_internal_endpoint_type] }
                rest_host_external_endpoint_type: { get_property: [rest_service, rest_host_external_endpoint_type] }

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      name: {concat:[{get_input: resource_prefix},rg,{get_input: resource_suffix}]}
      location: { get_input: location }
      azure_config: { get_input: azure_config }

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: { get_input: azure_config }
      resource_config:
        accountType: Standard_LRS
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: { get_input: azure_config }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: { get_input: azure_config }
      resource_config:
        addressPrefix: { get_input: subnet_private_cidr }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network


  network_security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: { get_input: azure_config }
      resource_config:
        securityRules:
        - name: nsr_ssh
          properties:
            description: SSH access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 22
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 100
            access: Allow
            direction: Inbound
        - name: nsr_http
          properties:
            description: REST API (HTTP) access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 80
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 200
            access: Allow
            direction: Inbound
        - name: nsr_https
          properties:
            description: REST API (HTTPS) access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 443
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 201
            access: Allow
            direction: Inbound
        - name: nsr_internal_rest
          properties:
            description: Internal REST access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 53333
            sourceAddressPrefix: { get_input: subnet_private_cidr }
            destinationAddressPrefix: '*'
            priority: 300
            access: Allow
            direction: Inbound
        - name: nsr_rabbitmq
          properties:
            description: RabbitMQ access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 5671
            sourceAddressPrefix: { get_input: subnet_private_cidr }
            destinationAddressPrefix: '*'
            priority: 400
            access: Allow
            direction: Inbound
        # Cluster-related ports, only used in a manager cluster
        - name: consul_server
          properties:
            description: Inter-cluster consul access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 8300
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 600
            access: Allow
            direction: Inbound
        - name: consul_serf_lan
          properties:
            description: Serf port used by consul
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 8301
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 601
            access: Allow
            direction: Inbound
        - name: consul_client
          properties:
            description: Consul API used in recovery
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 8500
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 602
            access: Allow
            direction: Inbound
        - name: filesystem_replication
          properties:
            description: Filesystem replication server access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 22000
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 603
            access: Allow
            direction: Inbound
        - name: db_replication
          properties:
            description: Database replication server access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 15432
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 604
            access: Allow
            direction: Inbound

    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  manager_host:
    type: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: { get_input: azure_config }
      os_family: { get_input: vm_os_family }
      use_public_ip: false
      resource_config:
        hardwareProfile:
          vmSize: { get_input: vm_size }
        storageProfile:
          imageReference:
            publisher: { get_input: vm_image_publisher }
            offer: { get_input: vm_image_offer }
            sku: { get_input: vm_image_sku }
            version: { get_input: vm_image_version }
        osProfile:
          adminUsername: { get_input: vm_os_username }
          adminPassword: { get_input: vm_os_password }
          linuxConfiguration:
            ssh:
              publicKeys: { get_input: vm_os_pubkeys }
            disablePasswordAuthentication: { get_input: vm_os_pubkey_auth_only }
      agent_config:
        install_method: none
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_nic
      target: vm_nic

  vm_public_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: { get_input: azure_config }
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  vm_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: { get_input: azure_config }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: vm_public_ip

  vm_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: { get_input: azure_config }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: vm_nic_ip_cfg

  # #####################################################################
  # The Python and Java nodes are used to provide runtime environments
  # on specific hosts. It allows us to define the runtime environment
  # and install it only once per host and then have a node depend on it.
  # Note that Erlang and NodeJS are also installed as runtime envs as
  # part of the RabbitMQ and Stage nodes respectively but as they're not
  # used by multiple nodes, we're not specifying them as independent
  # entities.
  # #####################################################################

  python_runtime:
    type: manager.nodes.PythonRuntime
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  java_runtime:
    type: manager.nodes.JavaRuntime
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  ######################################################################
  # These are the nodes comprising the Cloudify Manager's components
  ######################################################################
  consul:
    type: manager.nodes.Consul
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources

  rabbitmq:
    type: manager.nodes.RabbitMQ
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  syncthing:
    type: manager.nodes.Syncthing
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: consul

  postgresql:
    type: manager.nodes.Postgresql
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources

  logstash:
    type: manager.nodes.Logstash
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: logstash_to_postgresql
        target: postgresql
      - type: logstash_to_rabbitmq
        target: rabbitmq

  influxdb:
    type: manager.nodes.InfluxDB
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources

  nginx:
    type: manager.nodes.Nginx
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: rest_service
      - type: nginx_to_manager_configuration
        target: manager_configuration

  riemann:
    type: manager.nodes.Riemann
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: riemann_to_manager_configuration
        target: manager_configuration
      - type: riemann_to_rabbitmq
        target: rabbitmq
      - type: riemann_to_nginx
        target: nginx

  rest_service:
    type: manager.nodes.RestService
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: rest_to_manager_configuration
        target: manager_configuration
      - type: restservice_to_postgresql
        target: postgresql
      - type: restservice_to_rabbitmq
        target: rabbitmq

  mgmt_worker:
    type: manager.nodes.ManagementWorker
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: mgmtworker_to_rabbitmq
        target: rabbitmq
      - type: mgmtworker_to_manager_configuration
        target: manager_configuration

  amqp_influx:
    type: manager.nodes.AmqpInfluxBroker
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: amqpinflux_to_rabbitmq
        target: rabbitmq
      - type: amqpinflux_to_influxdb
        target: influxdb

  stage:
    type: manager.nodes.Stage
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: cloudify.relationships.depends_on
        target: manager_configuration
      - type: stage_to_restservice
        target: rest_service
      - type: stage_to_influxdb
        target: influxdb

  #################################
  # Sanity
  #################################
  sanity:
    type: manager.nodes.Sanity
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      - type: sanity_to_mgr_config
        target: manager_configuration
      - type: cloudify.relationships.depends_on
        target: python_runtime
      - type: cloudify.relationships.depends_on
        target: java_runtime
      - type: cloudify.relationships.depends_on
        target: postgresql
      - type: cloudify.relationships.depends_on
        target: logstash
      - type: cloudify.relationships.depends_on
        target: influxdb
      - type: cloudify.relationships.depends_on
        target: nginx
      - type: cloudify.relationships.depends_on
        target: riemann
      - type: cloudify.relationships.depends_on
        target: rest_service
      - type: cloudify.relationships.depends_on
        target: mgmt_worker
      - type: cloudify.relationships.depends_on
        target: manager_resources
      - type: cloudify.relationships.depends_on
        target: amqp_influx

  ######################################################################
  # Enable this node if you want to have the CLI installed within
  # the manager. This might aid in debugging problems or just
  # controlling the manager from within itself.
  ######################################################################
  # cli:
  #   type: manager.nodes.CLI
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: manager_host
  #     - type: cloudify.relationships.depends_on
  #       target: nginx
  #     - type: cloudify.relationships.depends_on
  #       target: rest_service

plugins:
  cli:
    install: false
    executor: central_deployment_agent

outputs:
  manager_ip:
    value: { get_attribute: [ manager_host, public_ip ] }
  rest_server_public_certificate:
    value: { get_attribute: [manager_configuration, external_rest_cert_content] }
  private_ip:
    value: { get_attribute: [ manager_host, ip ]}
